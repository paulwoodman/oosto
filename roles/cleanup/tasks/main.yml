---
- name: install Minimal pkgs
  ansible.builtin.dnf:
    name: '@Minimal Install'
    state: present

- name: remove GUI pkgs
  ansible.builtin.dnf:
    name: '@Server with GUI'
    state: absent

<<<<<<< HEAD
- name: install basic server pkgs
=======
- name: install basic server  pkgs
>>>>>>> c76729024ff2bdf0a14ed790de01b662c5c3a11e
  ansible.builtin.dnf:
    name: '@Server'
    state: present

- name: Disable GUI in systemd
  command: systemctl set-default -f multi-user.target

- name: list old kernels
  find:
    paths: /lib/modules
    file_type: directory
    exclude: '*.el8*'
  register: kernel_files

<<<<<<< HEAD
- name: Remove weak modules for the old kernels
  command: /usr/sbin/weak-modules --remove-kernel {{ item.path | basename }}
  loop: "{{ kernel_files.files }}"

- name: Remove old kernels from the boot loader
  command: /bin/kernel-install remove {{ item.path | basename }} /lib/modules/{{ item.path | basename }}/vmlinuz
  loop: "{{ kernel_files.files }}"

- name: Delete all the old kernels from the directory
  file:
    state: absent
    path: "{{ item.path }}"
  loop: "{{ kernel_files.files }}" 

- name: Remove leapp packages
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: absent
  with_items:
    - leapp-repository-deps-el8
    - leapp-deps-el8
    - leapp-upgrade-el7toel8-0.18.0-1.el7_9
  ignore_errors: True

- name: Remove old rescue kernels
  find:
    paths: /boot/
    patterns: "*rescue*"
    file_type: "file"
  register: rescue_files

- name: Remove the existing rescue kernels
  file:
    state: absent
    path: "{{ item.path }}"
  loop: "{{ rescue_files.files }}"

- name: Reinstall the current kernel to rescue kernel
  command: dnf reinstall -y kernel-core-{{ ansible_kernel }}

=======
- name: print old kernels
  debug:
    var: kernel_files

#    var: "{{ kernel_files | regex_search('path\\s+=\\s+(.*)','\\1')}}"
#- name: delete old kernels
#  command: /usr/sbin/weak-modules --remove-kernel kernel_files.path
>>>>>>> c76729024ff2bdf0a14ed790de01b662c5c3a11e
